// <auto-generated />
using System;
using DoAnCoSo.Areas.Identity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DoAnCoSo.Migrations
{
    [DbContext(typeof(QuanLyHoiThaoDBContext))]
    [Migration("20230510122828_idenity")]
    partial class idenity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DoAnCoSo.Areas.Identity.Data.Doi", b =>
                {
                    b.Property<int>("IdDoi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDoi"));

                    b.Property<string>("Donvi")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("GiaiDauIdgiaiDau")
                        .HasColumnType("int");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("LichThiDauIdTranDau")
                        .HasColumnType("int");

                    b.Property<int?>("LichThiDauIdTranDau1")
                        .HasColumnType("int");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("TenDoi")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdDoi");

                    b.HasIndex("GiaiDauIdgiaiDau");

                    b.HasIndex("LichThiDauIdTranDau");

                    b.HasIndex("LichThiDauIdTranDau1");

                    b.ToTable("dois");
                });

            modelBuilder.Entity("DoAnCoSo.Areas.Identity.Data.GiaiDau", b =>
                {
                    b.Property<int>("IdgiaiDau")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdgiaiDau"));

                    b.Property<int>("IdloaiGiaiDau")
                        .HasColumnType("int");

                    b.Property<DateTime>("NgayBatDau")
                        .HasColumnType("Date");

                    b.Property<DateTime>("NgayKetThuc")
                        .HasColumnType("Date");

                    b.Property<string>("NoiDung")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("TenGiaiDau")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("TrangThai")
                        .HasColumnType("bit");

                    b.HasKey("IdgiaiDau");

                    b.ToTable("giaiDaus");
                });

            modelBuilder.Entity("DoAnCoSo.Areas.Identity.Data.LichThiDau", b =>
                {
                    b.Property<int>("IdTranDau")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTranDau"));

                    b.Property<int?>("GiaiDauIdgiaiDau")
                        .HasColumnType("int");

                    b.Property<int>("IdDoi1")
                        .HasColumnType("int");

                    b.Property<int>("IdDoi2")
                        .HasColumnType("int");

                    b.Property<DateTime>("Thoigianbatdau")
                        .HasColumnType("Datetime");

                    b.Property<string>("Tiso")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Trangthai")
                        .HasColumnType("bit");

                    b.HasKey("IdTranDau");

                    b.HasIndex("GiaiDauIdgiaiDau");

                    b.ToTable("lichThiDaus");
                });

            modelBuilder.Entity("DoAnCoSo.Areas.Identity.Data.LoaiGiaiDau", b =>
                {
                    b.Property<int>("IdloaiGiaiDau")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdloaiGiaiDau"));

                    b.Property<int?>("GiaiDauIdgiaiDau")
                        .HasColumnType("int");

                    b.Property<string>("TenLoai")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("TrangThai")
                        .HasColumnType("bit");

                    b.HasKey("IdloaiGiaiDau");

                    b.HasIndex("GiaiDauIdgiaiDau");

                    b.ToTable("loaiGiaiDaus");
                });

            modelBuilder.Entity("DoAnCoSo.Areas.Identity.Data.QuanLyHoiThaoUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("Date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("QuanLyHoiThaoUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("DoAnCoSo.Areas.Identity.Data.ThiSinh", b =>
                {
                    b.HasBaseType("DoAnCoSo.Areas.Identity.Data.QuanLyHoiThaoUser");

                    b.Property<string>("BomonThiDau")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IdDoi")
                        .HasColumnType("int");

                    b.HasIndex("IdDoi");

                    b.HasDiscriminator().HasValue("ThiSinh");
                });

            modelBuilder.Entity("DoAnCoSo.Areas.Identity.Data.Doi", b =>
                {
                    b.HasOne("DoAnCoSo.Areas.Identity.Data.GiaiDau", null)
                        .WithMany("DanhSachDoi")
                        .HasForeignKey("GiaiDauIdgiaiDau");

                    b.HasOne("DoAnCoSo.Areas.Identity.Data.LichThiDau", null)
                        .WithMany("Doi1")
                        .HasForeignKey("LichThiDauIdTranDau");

                    b.HasOne("DoAnCoSo.Areas.Identity.Data.LichThiDau", null)
                        .WithMany("Doi2")
                        .HasForeignKey("LichThiDauIdTranDau1");
                });

            modelBuilder.Entity("DoAnCoSo.Areas.Identity.Data.LichThiDau", b =>
                {
                    b.HasOne("DoAnCoSo.Areas.Identity.Data.GiaiDau", null)
                        .WithMany("DanhSachLichThiDau")
                        .HasForeignKey("GiaiDauIdgiaiDau");
                });

            modelBuilder.Entity("DoAnCoSo.Areas.Identity.Data.LoaiGiaiDau", b =>
                {
                    b.HasOne("DoAnCoSo.Areas.Identity.Data.GiaiDau", null)
                        .WithMany("ThiDaus")
                        .HasForeignKey("GiaiDauIdgiaiDau");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DoAnCoSo.Areas.Identity.Data.QuanLyHoiThaoUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DoAnCoSo.Areas.Identity.Data.QuanLyHoiThaoUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoAnCoSo.Areas.Identity.Data.QuanLyHoiThaoUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DoAnCoSo.Areas.Identity.Data.QuanLyHoiThaoUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DoAnCoSo.Areas.Identity.Data.ThiSinh", b =>
                {
                    b.HasOne("DoAnCoSo.Areas.Identity.Data.Doi", "Doi")
                        .WithMany()
                        .HasForeignKey("IdDoi")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doi");
                });

            modelBuilder.Entity("DoAnCoSo.Areas.Identity.Data.GiaiDau", b =>
                {
                    b.Navigation("DanhSachDoi");

                    b.Navigation("DanhSachLichThiDau");

                    b.Navigation("ThiDaus");
                });

            modelBuilder.Entity("DoAnCoSo.Areas.Identity.Data.LichThiDau", b =>
                {
                    b.Navigation("Doi1");

                    b.Navigation("Doi2");
                });
#pragma warning restore 612, 618
        }
    }
}
